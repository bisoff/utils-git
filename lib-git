#!/bin/bash
# TODO: gids for commit - last ~1 ~2
# get all branches from remote (after clone)

UTILS_GIT_TRACE=1
alias log_print='[ "$UTILS_GIT_TRACE" == "1" ] && echo -e 1>&2 '

tab="%x09"
git_red="%C(red)" # "%x1b[31m"
git_green="%C(green)" #"x1b[32m"
git_green_dim="%C(green dim)"
git_green_bold="%C(green bold)"
git_norm="%x1b[0m"
git_blue="%C(blue)" #"%x1b[33m%x1b[34m%x1b[40m"
git_yellow="%C(yellow)"
#git_white="%C(reset)"
git_white="%C(white)" # bold
git_grey="%C(dim white)"
#    current = yellow reverse
#  [color "diff"]
    #meta = yellow bold
    #frag = magenta bold
    #old = red bold
    #new = green bold
HASH=%h
COMMIT="%s" #text
TIME="%ad%x08%x08%x08%x08%x08%x08%x08%x08%x08" # backspace timezone 
TIME2="(%ar)"
#BRANCH="%d"
AUTHOR="%an"
REFNAME="%d"

find_branch() {
	local mask=$1
	#local __result_varname=$2
	
	# find all by <mask>*
	local find_res=$(git branch 2> /dev/null | sed -e 's/^* \(.*\)/\1/' -e 's/  \(.*\)/\1/' | grep "^$mask")
	#echo find_res1: $find_res 1>&2
	local cn=$[$(echo "$find_res" | wc -l)] # found count
	#echo cn: $cn 1>&2
	[[ $cn -gt 1 ]] && echo "Branch containing $mask\* - IS AMBIGUOUS. Found $cn:" $find_res 1>&2 && exit 1 #echo "$find_res" 1>&2 && 
	
	if [[ "$find_res" != "" ]]; then 
		__result=$find_res
	  else # if not found at all
		# find all by *<mask>*
		local find_res=$(git branch 2> /dev/null | sed -e 's/^* \(.*\)/\1/' -e 's/  \(.*\)/\1/' | grep "$mask") 
		#echo find_res2: $find_res 1>&2
		[[ "$find_res" == "" ]] && echo "Branch containing $mask - NOT FOUND " 1>&2 && exit 2 
		#echo find_res:"$find_res"
		cn=$[$(echo "$find_res" | wc -l)] # found count
		[[ $cn > 1 ]] && echo "Branch containing $mask - IS AMBIGUOUS. Found $cn:" $find_res 1>&2 && exit 3 #echo "$find_res" 1>&2 && 
		__result=$find_res
  	  fi
  	echo $__result
  	#local myresult="$__result"
  	#echo myresult: $myresult
  	#eval $__result="'$myresult'"
	}

current_branch() {
	#echo $(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	curr_branch=`echo $(git rev-parse --abbrev-ref HEAD 2> /dev/null)`
	#[[ "$curr_branch" != "" ]] && curr_branch=" $curr_branch"
	echo "$curr_branch"
	}
branch_for_ps1(){
	curr_branch=$(current_branch)
	[[ "$curr_branch" != "" ]] && curr_branch=" $curr_branch"
	echo "$curr_branch"
	}
# last tag - git describe --always --tag
	# full - git log -1 --format="%H%n%aD"

current_remote() {
	curr_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null) #имя ветки, в которую был внесен последний коммит
	#git rev-parse <revision> - возвращает хеш коммита для указанной ревизии. Например, git rev-parse HEAD вернет хеш коммита, на который указывает HEAD.
	#echo curr_branch: $curr_branch 1>&2
	if [[ "$curr_branch" != "" ]]; then
		#echo "[current_remote]curr_branch NOT FOUND" 1>&2 && return
	  #else
		remotes=$(git config branch.$curr_branch.remote 2> /dev/null)
		if [[ "$remotes" == "" ]]; then
			remotes=$(git remote show)
			#echo "[current_remote] remotes: $remotes" 1>&2
			local cn=$[$(echo "$remotes" | wc -l)]
			[[ $cn -eq 1 ]] && echo "$remotes" && return
		  else
		  	echo "$remotes"
		  fi
	  fi	
	}
remote_for_ps1(){
	curr_remote=$(current_remote)
	[[ "$curr_remote" != "" ]] && curr_remote="->$curr_remote [$(get_remote_repo_name)] "
	echo "$curr_remote"
	}

curr_merge_branch() {
	curr_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
	[[ "$curr_branch" == "" ]] && echo curr_branch NOT FOUND 1>&2 && return
	echo $(git config branch.$curr_branch.merge 2> /dev/null | cut -d / -f 3)
	}

ahead_behind() {
	curr_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
	[[ "$curr_branch" == "" ]] && return #&& echo "[ahead_behind] curr_branch NOT FOUND" 1>&2 
	curr_remote=$(current_remote)
	[[ "$curr_remote" == "" ]] && echo -e "${red}[ahead_behind] curr_remote NOT FOUND$norm" 1>&2 && return
	curr_merge_branch=$(git config branch.$curr_branch.merge 2> /dev/null | cut -d / -f 3)
	if [[ "$curr_merge_branch" == "" ]]; then
		echo -e "${red}[ahead_behind] curr_merge_branch NOT FOUND$norm" 1>&2 #&& return
		curr_merge_branch=$curr_branch
	  fi
	#git remote update (git remote -v update
	#git status -uno
	git fetch
	res=$(git rev-list --left-right --count $curr_branch...$curr_remote/$curr_merge_branch 2> /dev/null) #| tr -s '\t' "|\${red}"
	arr=($(echo $res))
	#echo ${#arr[*]} 1>&2
	#echo ${arr[1]} 1>&2
	[ ${arr[0]} -ne 0 ] && ahead="$green+${arr[0]}$norm"
	[ ${arr[0]} -eq 0 ] && ahead="$cyan_dim${arr[0]}$norm"
	[ ${arr[1]} -ne 0 ] && behind="$red-${arr[1]}$norm"
	[ ${arr[1]} -eq 0 ] && behind="$cyan_dim${arr[1]}$norm"
	echo -e "$ahead$cyan_dim:$norm$behind"
	#↑n: ahead of remote by n commits
	#↓n: behind remote by n commits
	#L local branch, not remotely tracked
	}

files_status () {
	local all=$(git status -s --untracked-files --porcelain 2> /dev/null) 
	#local total=$(echo "$all"| wc -l)
	#echo total: $total 1>&2

	local untracked=$(echo "$all"| grep -E "^\?\?" | wc -l)
	untracked=`echo $untracked`
	#echo "untracked:-$untracked" 1>&2
	
	local staged=$(echo "$all" | grep "^[ADM]" | wc -l) # git status -s --untracked-files --porcelain | grep "^(A|D|M)"
	staged=`echo $staged`
	#echo staged: $staged 1>&2
	
	local changed=$(echo "$all"| grep -E "^.{0,1}M" | wc -l) # but unstaged
	changed=`echo $changed`
	#echo changed: $changed 1>&2
	
	local deleted=$(echo "$all"| grep -E "^.{0,1}D" | wc -l)
	deleted=`echo $deleted`
	#echo deleted: $deleted 1>&2
	
	#local ignored=$(git status -s --ignored --porcelain 2> /dev/null)
	#ignored=$(echo "$ignored"| grep "^!!" | wc -l)
	#ignored=`echo $ignored`
	#echo ignored: $ignored 1>&2
	# ✭ / * : Untracked
	# ✹ / ~ : Modified in the working tree
	# ✚ / + : Staged in the index (Exclude Renamed status)
	# ➜ / » : Renamed
	# ═ / = : Unmerged
	# ✖ / - : Deleted (This indicator can't be shown, as NERDTree doesn't display deleted files. I have no prefect idea to solve this problem currently.)
	# ✗ / × : Dirty (Only for directory)
	# ✔ / ø : Clean (Only for root directory)
	#✔: repository clean
		#●n: there are n staged files
	#✖n: there are n files with merge conflicts
		#✚n: there are n changed but unstaged files
	#…n: there are n untracked files
	#⚑n: there are n stash entries
	modi=$(( $staged + $changed )) # + $untracked + $deleted
	#echo modi: $modi 1>&2
	local res
	if [[ $modi -gt 0 || $untracked -gt 0 || $deleted -gt 0 ]]; then
		#[[ $modi -gt 0 ]] && res=$res$(echo -e "${green}~$modi") #✚
		#res="$res$norm"
		[[ $staged -gt 0 ]] && res=$res$(echo "\$green+$staged ") #✚
		#res="$res$norm"

		[[ $changed -gt 0 ]] && res=$res$(echo "\$yellow_bright~$changed ") #✚
		#[[ $changed -gt 0 ]] && res=$res$(echo -e "${yellow}=$changed$norm") #✚
		#res="$res$norm"

		[[ $deleted -gt 0 ]] && res=$res$(echo "\$red-$deleted ") #✖
		#res="$res$norm"

		[[ $untracked -gt 0 ]] && res=$res$(echo "\$red_bright?$untracked ") #…
		#res="$res$norm"

		#[[ $ignored -gt 0 ]] && res=$res$(echo -e "${grey} !$ignored") #…
		res="$res\$norm "
		echo "$res"
	  fi
	}

git_staged(){
	local all=$(git status -s --untracked-files --porcelain 2> /dev/null) 
	local staged=$(echo "$all" | grep "^[ADM]" | wc -l) # git status -s --untracked-files --porcelain | grep "^(A|D|M)"
	staged=`echo $staged`
	[[ $staged -gt 0 ]] && staged="+$staged "
	[[ $staged -eq 0 ]] && staged=""
	echo "$staged"
	}
git_changed(){
	local changed=$(git status -s --untracked-files --porcelain 2> /dev/null | grep -E "^\?\?|.{0,1}M" | wc -l) # but unstaged
	changed=`echo $changed`
	[[ $changed -gt 0 ]] && changed="~$changed "
	[[ $changed -eq 0 ]] && changed=""
	echo "$changed"
	}
git_deleted(){
	local all=$(git status -s --untracked-files --porcelain 2> /dev/null) 
	local deleted=$(echo "$all"| grep -E "^.{0,1}D" | wc -l)
	deleted=`echo $deleted`
	[[ $deleted -gt 0 ]] && deleted="-$deleted "
	[[ $deleted -eq 0 ]] && deleted=""
	echo "$deleted"
	}

git_prompt(){

	#[[ "$curr_branch" != "" ]] && echo -e " $green[$green $curr_branch$magenta->$(current_remote)$cyan_bold$(files_status)$green ]$norm " #$green_dim$
	[[ "$curr_branch" != "" ]] && echo "$cyan_back \w $norm $green$curr_branch$magenta->$(current_remote) $cyan_bold$green+$staged$red-$deleted$norm$cyan_back > $norm " #$green

	#[[ "$curr_branch" != "" ]] && echo "$green $curr_branch$magenta-> $cyan_bold$(files_status)$norm" 
	}
compare_with_remote(){
	#curr_remote=$(current_remote)
	LOCAL=$(git rev-parse @)
	#REMOTE=$(git rev-parse @{u}) # from local
	REMOTE=$(git ls-remote 2>/dev/null | awk "/HEAD/ {print \$1}")
	BASE=$(git merge-base @ @{u})
	#echo LOCAL:$LOCAL REMOTE:$REMOTE BASE:$BASE
	if [ $LOCAL = $REMOTE ]; then
		true #echo "Up-to-date"
	  elif [ $LOCAL = $BASE ]; then
		echo -e "${yellow}NEED TO PULL !${norm}" 1>&2
	  elif [ $REMOTE = $BASE ]; then
		echo -e "${yellow}NEED TO PUSH !${norm}" 1>&2
	  else
		echo -e "${red_bright}DIVERGED !!${norm}" 1>&2
	  fi
		}

git_rebase_status(){
	git status | head -n 1 # rebase in progress; onto 0103a6e
	}
get_remote_repo_name(){
	git config --get remote.$(current_remote).url | sed -E 's|.*/(.*).git/?$|\1|'	
	}

renametab() {
	# todo: oldpwd for *nix (~/.oldpwd for msys only)
	[[ "$(cat ~/.oldpwd)" == "$(pwd)" ]] && exit
	#echo "-$(pwd)-" 1>&2
	#echo "=$OLDPWD="  1>&2
	#echo "rename tab" 1>&2
	if [ "$ConEmuPID" != "" ]; then $ConEmuBaseDir/ConEmuC -GuiMacro Rename 0 "${PWD##*/}" 1> /dev/null; fi
	if [ "$TERM_PROGRAM" == "Apple_Terminal" ]; then echo -ne "\033]0;${PWD##*/}\007"; fi
	pwd > ~/.oldpwd
	#PREV_TAB="${PWD##*/}"
	}

GIT_PROMPT="\[$cyan_back\] \w \[$norm\]\[$green\]\$(branch_for_ps1)\[$magenta\]\$(remote_for_ps1)\[$cyan_bold\]\[$yellow\]\$(git_changed)\[$green\]\$(git_staged)\[$red\]\$(git_deleted)\[$norm\] \[$cyan_back\] \t > \[$norm\] \$(renametab)" 
	#http://mediadoneright.com/content/ultimate-git-ps1-bash-prompt
	#export PS1="\\033[0;34;48m[\u / \h] \\033[0;32;49m\w$git_branch: \[\033[m\]" #\\033[0;33;49m
	#parse_git_branch() { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/' }
	#\[<color>\] чтобу у bash'а не ехала крыша при определении длины промпта и текст командной строки не "съезжал" на следующую строку.

cmd_git_color_git_diff() {
	    if  [[ $1 == "M" ]] #grep -q "^M" <<< "$i"
	    then echo -e "${yellow} $2 ${norm}"
	    elif [[ $1 == "D" ]] #grep -q "^D" <<< "$i"
	    then echo -e "${red} $2 ${norm}"
	    elif [[ $1 == "A" ]] #grep -q "^A" <<< "$i"
	    then echo -e "${green} $2 ${norm}"
	    else echo -e "$2"
	    fi
	}
cmd_git_help() {
	utility_path=$(echo "`dirname \"$0\"`")
	echo $utility_path
	#cat 
	less $utility_path/readme.md 
	}

cmd_git_append_and_commit() {
	msg=$1
	#pwd | tr 'a-z' 'A-Z'
	#echo -e "\033[0;34;48m sss \033[m"
	echo -e "BRANCH: $green$(current_branch)$norm"

	savepath=`pwd`
	rootpath=`git rev-parse --show-toplevel`
	cd "$rootpath"
	git add -A .
	if [[ "$msg" == "" ]]; then
		[[ "$GITHOST" == "" ]] && echo "\$GITHOST not defined!" && cd "$savepath" && exit
		msg="$(echo $GITHOST)-up"
	  fi
	git commit -m "$msg" # $(date +'%d.%m.%y_%k:%M')
	cd "$savepath"

	#gilf 1
	# exit
	}
cmd_git_append_and_commit_amend() {
	echo -e "BRANCH: $green$(current_branch)$norm"

	git add -A .
	#test not staged and echo!
	if [[ "$1" != "" ]]; then
		git commit --amend -m "$1"
	  else
		git commit --amend 
	  fi
	}
cmd_git_append_by_names() {
	savepath=`pwd`
	rootpath=`git rev-parse --show-toplevel` # get repo root path
	cd "$rootpath"
	echo -e "BRANCH: $green$(current_branch)$norm"
	files="$1"
	[[ "$files" == "" ]] && git add -A .
	[[ "$files" != "" ]] && git add "$files"
	cd "$savepath"
	}
cmd_git_append_by_mask_commit_and_push() {
	# add by mask, commit and push
	files="$1"
	msg=$2
	[[ "$files" == "" ]] && echo "[ADD AND PUSH] mask is missed !" && exit

	ga "$files"
	gc $msg
	gus
	}

cmd_git_сommit_staged() {
	msg=$1
	#pwd | tr 'a-z' 'A-Z'
	#echo -e "\033[0;34;48m sss \033[m"
	echo -e "BRANCH: $green$(current_branch)$norm"

	#test not staged and echo!

	if [[ "$msg" == "" ]]; then
		[[ "$GITHOST" == "" ]] && echo "\$GITHOST not defined!" && exit
		msg="$(echo $GITHOST)-up"
	  fi
	git commit -m "$msg" # $(date +'%d.%m.%y_%k:%M')
	}
cmd_git_commit_staged_amend() { #gcm
	echo -e "BRANCH: $green$(current_branch)$norm"

	#test not staged and echo!
	if [[ "$1" != "" ]]; then
		git commit --amend -m "$1"
	  else
		git commit --amend 
	  fi
	}

cmd_git_diff_file_list_this_and_prior_commits() { # gdi1

	# all files
	#[[ "$1" == "" ]] 		&& git diff --word-diff --color	| less -R				&& exit 
	fname="$1"
	mode="$2"

	if [[ "fname" == "" ]]; then
		array=($(git ls-files --others --exclude-standard)) # untracked
		{(git diff --stat=200 --color | sed -n '$! p'); for i in "${array[@]}"; do echo -e " ${yellow}UNTRACKED: $i${norm}"; done;} | awk '{print NR "\t" $0}' #'NR!=FNR {FNR==1?c=NR:1} FNR<c-1'   awk 'NR>n{print A[NR%n]} {A[NR%n]=$0}' n=1
		#array=($(git ls-files --others --exclude-standard)) 
		#if [ "${#array[@]}" -ne 0 ]; then
		#	echo -e " ${yellow_back}== UNTRACKED ==${norm}"
		#	for i in "${array[@]}"; do echo -e " ${yellow}$i${norm}"; done
		#  fi
		exit 
	  fi

	# hash
	#echo "$1"
	[[ "fname" =~ "[a-zA-Z0-9]{7}" ]] 	&& git diff "$1" "$1~1" --word-diff  --color | less -R			&& exit 

	# one file
	#echo git diff HEAD --word-diff --color -U99999 "./$1"
	if [[ "$1" != "" ]]; then
		if [ "$mode" == "" ]; then
			status=`echo $(git status "fname" -s | cut -c 1-3)` #; echo status:$status #; exit
			[[ "$status" == "??" ]] && cat "$1" | pygmentize -g | less -MNR && exit # untracked
			[[ "$status" == "D" ]]	&& git show HEAD:"fname" | less -MNR && exit #git show $(git rev-list --max-count=1 --all -- "$1"):"$1" #deleted
			git diff HEAD --color -U99999 "$1" | tail -n +6 | less -MNR 
		  else
		  	[ "$mode" == "last" ] && git diff HEAD~1 HEAD --color -U99999 "$fname" | tail -n +7 | less -MNR 
		  	[ "$mode" == "prev" ] && git diff HEAD~2 HEAD~1 --color -U99999 "$fname" | tail -n +7 | less -MNR 
		  fi
		#exit 
	  fi
	# less $(git status -uno -s --color | cut -c 4-) # :n :p


	#[[ "$1" != "" ]] 		&& git diff HEAD --word-diff --color "$1" | sed -n '6,$p' 
	#[[ "$1" != "" ]] 		&& git diff HEAD --word-diff --color "$1" | more -R #less -R 	&& exit # file "HEAD~1" "HEAD" tail -n +6  sed -n '6,$p' # -R or --RAW-CONTROL-CHARS  Like -r, but only ANSI "color" escape sequences are output in "raw" form. (...)

	#[[ "$1" != "" ]] 		&& CLICOLOR_FORCE= git diff HEAD --word-diff --color "$1" | less -R  #CLICOLOR_FORCE= ls -G | less -R
	#[[ "$1" != "" ]] 		&& awk '(NR > 5)' <(git diff HEAD --word-diff --color "$1")

	#rn=1
	#while IFS= read line; do
	#	[ $rn -gt 5 ] && printf '%s\n' "$line"
	#	(( rn = rn + 1 ))
	#  done < <(git diff HEAD --word-diff --color $1)

	#git diff --stat=200 HEAD~1 HEAD --color | sed -n '$! p'
	}
cmd_git_diff_file_list_menu() {
	# shows menu to choose file which diff you want to view

	mode="$1" # "": work/head  last:head/head~1
	# TODO: if total files > 9 -> wait second key
	# TODO: add nexp/prev commit (correct gids and pass "hash~<n> hash~<-n>")
	# TODO: to view deleted file - cirrect gdis)

	#put untracked fnames to arr
	if [ "$mode " == "" ]; then
		arr=($(git ls-files --others --exclude-standard)) 
	  fi
		#array=($(gis | grep -v '??' | cut -c 4-)) 
		#array=($({(git diff --stat=200 --color | sed -n '$! p'); for i in "${arr[@]}"; do echo -e " ${yellow}$i${norm}"; done;	} | awk '{print NR "\t" $0}' )) 

	#put tracked fnames to array:
	[ "$mode" == "" ] && array=($({(git status -s --untracked-files --porcelain | grep -v '??' | cut -c 4-); for i in "${arr[@]}"; do echo "$i"; done;	})) 
	[ "$mode" == "last" ] && array=($(git diff head head~1 --name-only | sed -E "s/^(.*)$/\"\1\"/g" )) #   while read x; do echo '"'"$x"'"'; done
	[ "$mode" == "prev" ] && array=($(git diff head~1 head~2 --name-only | sed -E "s/^(.*)$/\"\1\"/g" ))

	(( tot = ${#array[@]} )) 
	#echo tot: $tot #+ ${#arr[@]}
	[[ $tot -eq 0 ]] && echo "No files found" && exit 
	#echo "${array[0]}"
	#for i in "${array[@]}"; do echo "$i"; done; exit # echo "${array[@]}"
	clear
	bound=${#array[@]} 
	(( bound = bound - 1 )) #; echo bound: $bound

	# show header with enumed file list:
	[ "$mode" == "" ] && {(git diff --stat=200 --color | sed -n '$! p'); for i in "${arr[@]}"; do echo -e " ${yellow}UNTRACKED: $i${norm}"; done;	} | awk '{print NR "\t" $0}' 
	[ "$mode" == "last" ] && (git diff head head~1 --stat --color) | sed -n '$! p' | awk '{print NR "\t" $0}' 
	[ "$mode" == "prev" ] && (git diff head~1 head~2 --stat --color) | sed -n '$! p' | awk '{print NR "\t" $0}' 

	# show menu
	current=0 # current index for view diff
	init_prompt="${yellow}Press key with your choice${norm} - (${green}0..9${norm}-file_number  ${green}N${norm}-next  ${green}P${norm}:revious  ${green}<CR>${norm}-current  ${green}Q${norm}-quit: " 
	looped_prompt="\n$init_prompt"
	#prompt_out=" ${yellow}Viewed #$(( current + 1 )) - '${array[$current]}'${norm} $looped_prompt"
	fail_prompt=" ${red}$n is out of bounds (1..$(( bound + 1 )) ) !${norm} $looped_prompt"
	(( num = current + 1 )) # echo num: $num
	#gid "${array[$current]}"
	echo -n -e "$init_prompt"
	read -rsn1 n
	echo -n -e "$n"
	while true;	do
		#clear
		is_invalid=1 # unknown key pressed
		if [ "$n" == "Q" -o "$n" == "q" ]; then 
			echo "" #<CR>
			break
		  fi
		if [ "$n" == "C"  -o  "$n" == "c"  -o  "$n" == "" ]; then
			[ "$n" == "" ] && echo -n "<CR>"
			is_invalid=0
		  fi
		if [ "$n" == "N" -o "$n" == "n" ]; then
			if [ $current -lt $bound ]; then 
				(( current = current + 1 )) 
				is_invalid=0
			  else
			  	is_invalid=2 # out of bounds
			  fi
		  fi
		if [ "$n" == "P" -o "$n" == "p" ]; then
			if [ $current -gt 0 ]; then
				(( current = current - 1 ))
				is_invalid=0
			  else
			  	is_invalid=2 # out of bounds
			  fi
		  fi
		if [[ $n =~ ^[0-9]$ ]]; then #if [ "$var" -eq "$var" ] 2>/dev/null; then
			(( new_idx = n - 1 ))

			if [[ $new_idx -le $bound  &&  $new_idx -ge 0 ]]; then 
				(( current = new_idx )) 
				is_invalid=0
			  else
			  	is_invalid=2 # out of bounds
			  fi
		  fi
		if [ $is_invalid -eq 2 ]; then
		  	echo -n -e "$fail_prompt"
			read -rsn1 n
			echo -n -e "$n"
			continue
		  fi
		if [ ! $is_invalid -eq 0 ]; then
			echo -n -e " ${red}'$n' is not valid choice !${norm} $looped_prompt"
			read -rsn1 n
			echo -n -e "$n"
			continue
		  fi
		# pwd
		#[ ! -f "./${array[$current]}" ] && echo -e "\n" && ls "./${array[$current]}" # - not found
		eval file_wo_quotes="${array[$current]}"
		#echo -e "\n$n"
		if [ -f "$file_wo_quotes" ]; then
			#echo gdis "${array[$current]}" "$mode"
			gdi1 "$file_wo_quotes" "$mode"
			echo -n -e "${yellow} Viewed $(( current + 1 )) - '$file_wo_quotes'${norm} $looped_prompt" # "$prompt_out"  #$(( current + 1 ))
		  else
		  	echo -e " ${yellow}File (#$(( current + 1 ))) not found (deleted?) - '$file_wo_quotes'${norm}"
			echo -n -e "$init_prompt"
		  fi
		read -rsn1 n
		echo -n -e "$n"
	  done
	}

cmd_git_fetch() {
	echo -e "${red}git fetch$norm"
	git fetch -vv --all 2>&1 | grep "\-> "
	}

cmd_git_branch_show_local_and_remote() {
	echo "local and remote branches:"
	if [[ "$1" == "" ]]; then
		git branch -avv
	  else
	  	branch=$(find_branch "$1") 
	  	[ $? -eq 0 ] && git checkout  $branch
	  fi
	}
cmd_git_branch_show_remote_only() {
	echo "remote branches:"
	git branch -r -vv #all
	}
cmd_git_branch_show_unmerged() {
	echo "unmerged branches:"
	git branch --no-merged
	}
cmd_git_branch_show_local_or_switch() {
	if [[ "$1" == "" ]]; then
		echo "local branches:"
		git branch -lvv
		#git for-each-ref --format='%(refname:short) <- %(upstream:short)' refs/heads
		#git for-each-ref --format=$'\n'' '' '' '' '' '' ''/%(refname:short);%(upstream:short)' refs/heads | tr ';' $'\n'
		#git rev-parse --symbolic-full-name --abbrev-ref master@{u}
	  else
	  	branch=$(find_branch "$1") 
	  	[ $? -eq 0 ] && git checkout $branch
	  fi
	}

cmd_git_branch_new() {
	if [[ "$1" == "" ]]; then
		echo "[CREATE NEW BRANCH] first param must be Name"
	  else
	  	git checkout -b "$1"
	  fi
	}
cmd_git_branch_delete_if_merged() {
	if [[ "$1" == "" ]]; then
		echo branch name IS MISSED 1>&2 && return
	  else
	  	branch=$(find_branch "$1") 
	  	[[ "$branch" == "" ]] && echo -e "${red}branch NOT FOUND$norm" 1>&2 && exit
	  	curr_branch=$(current_branch)
	  	[[ $curr_branch == "$branch" ]] && echo -e "${red}can't delete itself $norm" 1>&2 && exit
	  	git branch -d $branch # если ветка была смержена
	  fi
	}
cmd_git_branch_delete_any_way() {
	if [[ "$1" == "" ]]; then
		echo branch name IS MISSED 1>&2 && exit
	  else
	  	branch=$(find_branch "$1") 
	  	[[ "$branch" == "" ]] && echo -e "${red}branch NOT FOUND$norm" 1>&2 && exit
	  	curr_branch=$(current_branch)
	  	[[ $curr_branch == "$branch" ]] && echo -e "${red}can't delete itself $norm" 1>&2 && exit
	  	git branch -D $branch
	  fi
	}


cmd_git_log_host_first(){
	#git log --graph -n 20 --full-history --all --date=iso --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s $blue(%an - %ad%x08%x08%x08%x08%x08%x08%x08%x08%x08)%Creset"
	#http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs

	if [[ "$1" == "" ]];then
		commits_num=20
	  else
	  	commits_num=$1
	  fi

	BRANCH="$d"
		#git log --graph -n 20 --full-history --all --date=iso --color --pretty=format:"$red%h$green%d %x09% %s $blue(%an - %ad%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08)%Creset"
	git log --graph -n $commits_num --full-history --source  --all --date=iso --color --author-date-order --decorate \
		--pretty=format:"$git_green$COMMIT $git_yellow$HASH $git_norm$git_white$TIME2 $BRANCH $git_grey $AUTHOR $git_white $git_green $REFNAME" #$git_blue $git_green
	# git stores the branch name at the most recent commit of the branch. All commits in the history are equal and anonymous
	#	--pretty=oneline  --decorate
	#        while IFS=+ read -r hash time branch message; do                                            \
	#            timelength=$(echo \"$time\" | sed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
	#            timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
	#            printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"$message\";  \
	#        done < <( git log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset)+%C(dim black)(%cr)%C(reset)+%C(auto)%d%C(reset)++\n+++       %C(bold black)%an%C(reset)%C(black): %s%C(reset)' && echo)
	# bc
		# --branches=master --remotes=bb
		#git log --graph -n $commits_num --full-history --all --date=format:'%m-%d' --color --pretty=format:"$grey$HASH $tab$norm$yellow%ad $white$COMMIT $green$BRANCH $blue$AUTHOR $white" # %Y-  %H:%M:%S

	#git log -n 20 --oneline --abbrev-commit --all --graph --pretty=format:"%C(yellow)%h%x09%Creset%x09%x09%s (%an)" $*
	#git log -last --pretty=format:"%C(yellow)%h%x09%Creset%an%x09%x09%s" --decorate -20 --graph $*
	}
cmd_git_log_hash_first(){
	if [[ "$1" == "" ]];then
		commits_num=20
	  else
	  	commits_num=$1
	  fi

	#git log --graph -n 20 --full-history --all --date=iso --color --pretty=format:"$red%h$green%d %x09% %s $blue(%an - %ad%x08%x08%x08%x08%x08%x08%x08%x08%x08%x08)%Creset"
	git log --graph -n $commits_num --full-history --date=iso --color --pretty=format:"$git_grey$HASH $tab$git_norm$git_yellow$TIME $git_white$COMMIT $git_green$BRANCH $git_blue$AUTHOR $git_white" 
	#git log --graph -n $commits_num --full-history --all --date=format:'%m-%d' --color --pretty=format:"$grey$HASH $tab$norm$yellow%ad $white$COMMIT $green$BRANCH $blue$AUTHOR $white" # %Y-  %H:%M:%S

	#git log -n 20 --oneline --abbrev-commit --all --graph --pretty=format:"%C(yellow)%h%x09%Creset%x09%x09%s (%an)" $*
	#git log -last --pretty=format:"%C(yellow)%h%x09%Creset%an%x09%x09%s" --decorate -20 --graph $*
	}
cmd_git_log_with_files(){
	if [[ "$1" == "" ]];then
		commits_num=7
	  else
	  	commits_num=$1
	  fi
	git log --all --full-history --decorate --date=iso --pretty=format:"%C(red)%h - %C(green) %d %C(yellow)%s %C(blue)(%an - %ad%x08%x08%x08%x08%x08%x08%x08%x08%x08)%Creset" -n $commits_num --name-status
	}
cmd_git_log_hash_first_with_merges(){
	git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative 
	}
cmd_git_log_with_file_diff(){
	git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative -p
	}
cmd_git_gilh(){
	git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short #??
	}
cmd_git_last_n_commits_stat_simple(){
	if [[ "$1" == "" ]];then
		commits_num=10
	  else
	  	commits_num=$1
	  fi
	echo "ADDED   DELETED"

	git log -n $commits_num -last   --pretty=format:"%h%x09%Creset%an%x09%x09%s" --decorate --numstat | grep -v "^$"  | grep -vE "^[0-9a-f]{7}" | grep -vE "^-"

	#git log --numstat --pretty --oneline 0f5d22e..HEAD -- <filename>
	}
cmd_git_last_n_commits_stat_with_hash(){
	if [[ "$1" == "" ]];then
		commits_num=10
	  else
	  	commits_num=$1
	  fi
	echo "ADDED   DELETED"
	git log -n $commits_num 	--pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

	#git log --numstat --pretty --oneline 0f5d22e..HEAD -- <filename>
	}

cmd_git_branch_merge_after_pull(){
	source_branch=$(find_branch "$1") #; echo branch: $branch
	exitcode=$?
	[ $exitcode -ne 0 ] && echo not found && exit

	currbranch=$(current_branch)
	echo "from '$source_branch' to '$currbranch'"

	echo "Pull '$source_branch'"
	#git checkout $branch
	gib $source_branch || exit
	gul || exit

	#git checkout $source_branch
	gib $currbranch || (echo "FAIL! ANOTHER BRANCH !!" && exit)

	#echo exitcode: $exitcode
	#echo current_branch: $(current_branch)
	#[ $exitcode -eq 1 ] && echo "Find branch by $1*: AMBIGUOUS" && exit
	#[ $exitcode -eq 2 ] && echo "Find branch by *$1*: NOT FOUND" && exit
	#[ $exitcode -eq 3 ] && echo "Find branch by *$1*: AMBIGUOUS" && exit

	git merge $source_branch
	#echo done
	}
cmd_git_branch_merge_with_local(){
	branch=$(find_branch "$1") # result; echo result:$result; branch=${result}
	exitcode=$?
	#echo exitcode: $exitcode
	#echo current_branch: $(current_branch)
	[ $exitcode -ne 0 ] && echo not found && exit
	#[ $exitcode -eq 1 ] && echo "Find branch by $1*: AMBIGUOUS" && exit
	#[ $exitcode -eq 2 ] && echo "Find branch by *$1*: NOT FOUND" && exit
	#[ $exitcode -eq 3 ] && echo "Find branch by *$1*: AMBIGUOUS" && exit

	git merge $branch
	#echo done
	}
cmd_git_branch_target_branch_with_this_after_pull(){
	currbranch=$(current_branch)
	echo currbranch: $currbranch

	tobranch=$(find_branch "$1")
	echo tobranch: $tobranch

	  # [ $? -eq 0 ] 
	if [[ "$tobranch" != "" ]]; then
		git checkout $tobranch
		  [ $? -ne 0 ] && exit
		gul # fetch and merge
		  [ $? -ne 0 ] && exit
		git merge $currbranch
		  [ $? -ne 0 ] && exit
		git checkout $currbranch
		#gil 7
	  fi
	}
cmd_git_branch_target_local_branch_with_this(){
	currbranch=$(current_branch)
	echo currbranch: $currbranch

	tobranch=$(find_branch "$1")
	echo tobranch: $tobranch

	  # [ $? -eq 0 ] 
	if [[ "$tobranch" != "" ]]; then
		git checkout $branch
		  [ $? -ne 0 ] && exit
		git merge $currbranch
		  [ $? -ne 0 ] && exit
		git checkout $currbranch
		gil 7
	  fi
	}

cmd_git_remotes_show_detail(){
	#git remote -v
	remotes=$(git remote show)
	#echo remotes: $remotes
	for name in $remotes; do 
		if [[ "$1" != "" ]]; then
			remote=$(echo $name | grep "$1")
			#echo remote: $remote
			[[ "$name" == "$remote" ]] && git remote show $name
		  else
		  	git remote show $name
		  fi
	  done
	}
cmd_git_remote_rename(){
	# rename current remote
	[[ "$1" == "" ]] && echo "[RENAME REMOTE] New name is missed !" && exit
	#remotes=$(ls -1)
	curr_remote=`current_remote`
	# echo curr_remote: $curr_remote
	if [[ "$curr_remote" != "" ]]; then
		git remote rename $curr_remote "$1"
	  else
		remotes=$(git remote show)
		#echo remotes: $remotes
		remotes_cnt=$(echo -e "$remotes" | wc -l)
		#echo remotes_cnt: $remotes_cnt
		if [[ $remotes_cnt -eq 1 ]]; then
			git remote rename $remotes "$1"
		  else
		  	echo remote not defined
		  fi
	  fi
	}
cmd_git_remotes_show(){
	#git remote -v
	curr_remote=$(current_remote)
	remotes=$(git remote show)
	#echo remotes: $remotes
	for name in $remotes; do 
		if [[ "$name" == "$curr_remote" ]]; then
			echo -e "${red}$name$norm"
		  else
		  	echo $name
		  fi
	  done
	}

cmd_git_status_with_untracked(){
	#pwd | tr 'a-z' 'A-Z'
	git status -s --untracked-files $* # --porcelain
	}
cmd_git_status_colored(){
	#git diff --name-status | xargs cmd_git_color_git_diff #--delimiter="\n"  -L1
	git diff --name-status -z| while IFS= read -d '' a; do read -d '' b; cmd_git_color_git_diff $a "$b"; done 
	# xargs -L1 git push --all --quiet -u
	# xargs -I% svn rm %
	#git status -s --untracked-files $* # --porcelain
	}
cmd_git_status_ignored(){
	git status --ignored
	}
cmd_git_status_untracked(){
	#pwd | tr 'a-z' 'A-Z'
	git status -s --untracked-files $* # --porcelain
	compare_with_remote
	}

cmd_git_switch_version(){
	#echo "Use syntax: . gitsw"
	[[ "$APPS" = "" ]] && echo "\$APPS is not defined; setup it (ex. in ~/.bash_profile or by 'varadd APPS <path>') and reopen shell" && exit 1

	if [ -d "$APPS/Git2.4.6" ]; then
		echo "set default git to 2.4.6"
		cmd //c "move %APPS%/Git %APPS%/Git1.9.5 && move %APPS%/Git2.4.6 %APPS%/Git"
	  else
		if [ -d "$APPS/Git1.9.5" ]; then
			echo "set default git to 1.9.5"
			cmd //c "move %APPS%/Git %APPS%/Git2.4.6 && move %APPS%/Git1.9.5 %APPS%/Git"
		  fi
	  fi
	}
cmd_git_commit_and_push(){
	gac "$1"
	#git push #all --all
	gus
	}
cmd_git_show_file_diff(){
	git show $1
	}

cmd_git_stash_list(){
	git stash list
	}
cmd_git_stash_save(){
	git stash #save
	}
cmd_git_stash_pop(){
	git stash pop
	}

cmd_git_pull(){
	curr_remote=$(current_remote)
	echo curr_remote: $curr_remote
	if [[ "$curr_remote" == "" ]]; then 
		curr_remote=$(girs)
		cn=$[$(echo "$curr_remote" | wc -l)]
		[[ $cn -ne 1 ]] && curr_remote=""
	  fi
	[[ "$curr_remote" == "" ]] && echo -e "${red}current remote NOT FOUND$norm" 1>&2 && exit
	curr_branch=$(current_branch) #; echo curr_branch: -$curr_branch-
	echo -e "${red}git pull $curr_remote $curr_branch$norm"  #-u
	git pull $curr_remote $curr_branch #--all 
	}
cmd_git_commit_and_push(){
	curr_remote=$(current_remote)
	#echo curr_remote: $curr_remote
	if [[ "$curr_remote" == "" ]]; then 
		manual_remote="$1"
		if [[ "$manual_remote" == "" ]]; then
			curr_remote=`git remote show`
			cnt=$[$(echo "$curr_remote" | wc -l)]
			[[ $cnt -ne 1 ]] && curr_remote=""
		  else
			curr_remote=`git remote show | grep $manual_remote`
		  fi
	  fi
	[[ "$curr_remote" == "" ]] && echo -e "${red}current remote NOT FOUND$norm" 1>&2 && exit
	curr_branch=$(current_branch) #; echo curr_branch: -$curr_branch-
	echo -e "${red}git push $curr_remote $curr_branch$norm"  #-u
	#curr_remote=$(echo "$curr_remote"| perl -pe 's/\\033\[\d*(;\d*)*m//g')
	#echo curr_remote: $curr_remote
	#echo curr_branch: $curr_branch
	git push "$curr_remote" "$curr_branch" -u #all --all
	}
